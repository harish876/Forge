package utils

import (
	"context"
	"fmt"
	"testing"

	sitter "github.com/smacker/go-tree-sitter"
	"github.com/smacker/go-tree-sitter/python"
)

// func TestTreeSitterQueryJS(t *testing.T) {
// 	var sourceCode = []byte(`
// 	let customers = [
//     	{ id: 0, name: 'paul', location: { address: 'oxford street' } },
//     	{ id: 1, name: 'jeff' },
//     	{ id: 2, name: 'mary' }
//   	];
//   	let customer = customers.find(cust => cust.name === 'jeff');
//   	console.log(customer);
// 	`)

// 	parser := sitter.NewParser()
// 	defer parser.Close()

// 	language := javascript.GetLanguage()
// 	parser.SetLanguage(language)
// 	query := []byte(`(variable_declarator
// 		name: (identifier) @name
// 		value: (array (
// 			object (
// 				pair
// 					key: (property_identifier) @key
// 					value: (number) @val
// 			)
// 		)
// 	  )
// 	)`)

// 	lang := javascript.GetLanguage()
// 	node, _ := sitter.ParseCtx(context.Background(), sourceCode, lang)

// 	// Execute the query
// 	q, _ := sitter.NewQuery(query, language)
// 	qc := sitter.NewQueryCursor()
// 	qc.Exec(q, node)

// 	for {
// 		m, ok := qc.NextMatch()
// 		if !ok {
// 			break
// 		}
// 		// Apply predicates filtering
// 		m = qc.FilterPredicates(m, sourceCode)
// 		for _, c := range m.Captures {
// 			fmt.Println(c.Node.Content(sourceCode))
// 		}
// 	}

// }

func TestTreeSitterQueryPython(t *testing.T) {
	query := []byte(`(
		module(
			class_definition
			name: ((identifier) @className (#match? @className "ExtractorFactory"))
		   		body: (block
					(function_definition 
						name: ((identifier) @functionName (#match? @functionName "create"))
						body: (block
							(match_statement 
								body: (block
								alternative: (
										case_clause(
											case_pattern (string)
					   				) @caseClause
					 			)
				   			)
						)
					)
				)
			)	 
		)
	)	
	`)

	var sourceCode = []byte(`
	from factory.factory_interface import Factory
	from jobs.extractors.extract_json_job import ExtractJsonJob
	
	class ExtractorFactory(Factory):
		def __init__(self):
			super().__init__()
	
		def create(self, mode, **kwargs):
			merged_config = self.get_config(mode)
	
			#Autogenerated File Section. Do not Edit this file
	
			match mode:
				case "extract_json":
					return ExtractJsonJob(config=merged_config)
				case "extract_harish":
					return ExtractJsonJob(config=merged_config)
				case "extract_girish":
					return ExtractJsonJob(config=merged_config)
				case _:
					raise ValueError("Invalid extract type")
	
	class LoaderFactory(Factory):
		def Create(self, mode, **kwargs):
			merged_config = self.get_config(mode)
	
			#Autogenerated File Section. Do not Edit this file
	
			match mode:
				case "extract_json":
					return ExtractJsonJob(config=merged_config)
				case "extract_harish":
					return ExtractJsonJob(config=merged_config)
				case "extract_girish":
					return ExtractJsonJob(config=merged_config)
				case _:
					raise ValueError("Invalid extract type")
	
	`)

	lang := python.GetLanguage()
	node, _ := sitter.ParseCtx(context.Background(), sourceCode, lang)

	// Execute the query
	q, _ := sitter.NewQuery(query, lang)
	qc := sitter.NewQueryCursor()
	qc.Exec(q, node)

	for {
		m, ok := qc.NextMatch()
		if !ok {
			break
		}
		// Apply predicates filtering
		m = qc.FilterPredicates(m, sourceCode)
		for _, c := range m.Captures {
			if c.Node.Type() == "case_pattern" {
				fmt.Println(c.Node.Content(sourceCode))
			}
		}
	}
}
